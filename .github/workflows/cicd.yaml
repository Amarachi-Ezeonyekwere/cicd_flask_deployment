name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
    paths-ignore: 
      - '**.md'
      - '**.docs/**'
  pull_request:
    branches: [ master ]

jobs:
  # ----------------------------
  # 1. Security + Code Quality
  # ----------------------------
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Scan for secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --redact

      - name: Add summary for Gitleaks
        if: always()
        run: echo "###  Secret Scan\n- ✅ Gitleaks scan completed" >> $GITHUB_STEP_SUMMARY

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r flask-todo/requirements.txt

      - name: Run Bandit
        run: pip install bandit && bandit -r flask-todo
      - name: Add summary for Bandit
        if: always()
        run: echo "###  Bandit\n- ✅ Python security analysis completed" >> $GITHUB_STEP_SUMMARY

      - name: Run pip-audit
        run: pip install pip-audit && pip-audit -r flask-todo/requirements.txt
      - name: Add summary for pip-audit
        if: always()
        run: echo "###  pip-audit\n- ✅ Dependency vulnerability scan completed" >> $GITHUB_STEP_SUMMARY

      - name: Lint Dockerfile
        run: docker run --rm -i hadolint/hadolint < ./flask-todo/dockerfile
      - name: Add summary for Hadolint
        if: always()
        run: echo "###  Hadolint\n- ✅ Dockerfile linting completed" >> $GITHUB_STEP_SUMMARY

  # ----------------------------
  # 2. Run Tests
  # ----------------------------
  tests:
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r flask-todo/requirements.txt

      - name: Run Pytest
        run: pytest -v
      - name: Add summary for Pytest
        if: always()
        run: echo "###  Pytest\n- ✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY

  # ----------------------------
  # 3. Build + Push Docker Image
  # ----------------------------
  docker-build:
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./flask-todo
          push: true
          tags: amara3000/cicd-flask-todo:latest
      - name: Add summary for Docker Build
        if: always()
        run: echo "###  Docker Build\n- ✅ Image built and pushed to Docker Hub" >> $GITHUB_STEP_SUMMARY

  # ----------------------------
  # 4. Scan Docker Image
  # ----------------------------
  image-scan:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: amara3000/cicd-flask-todo:latest
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
      - name: Add summary for Trivy
        if: always()
        run: echo "###  Trivy Scan\n- ✅ Image vulnerability scan completed" >> $GITHUB_STEP_SUMMARY

  # ----------------------------
  # 5. Deploy to EC2
  # ----------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: image-scan

    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull amara3000/cicd-flask-todo:latest
            docker stop flask_todo_app || true
            docker rm flask_todo_app || true
            docker run -d --name flask_todo_app -p 80:5000 amara3000/cicd-flask-todo:latest